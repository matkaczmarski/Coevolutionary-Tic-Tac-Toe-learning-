{
    "contents" : "#Rozgrywka\n\nblank <- 0\n#lockBinding(\"b\", globalenv())\no <- 1\n#lockBinding(\"o\", globalenv())\nx <- 2\n#lockBinding(\"x\", globalenv())\n\nN <- 0\nK <- 0\n\nboard <- matrix(0, N, N)\nmoveCounter <- N*N\n\ngetNextMove <- function(board){\n  return(sample(which(board == 0, arr.ind = F),1))\n}\n\nisIndexValid <- function(board,x,y){\n  return(x > 0 && y > 0 && x <= nrow(board) && y <= ncol(board))\n}\n\ncheckResult <- function(board, x,y,character, K){\n  hStart <- y\n  hEnd <- y\n  #horizontal\n  for(i in 1:K){\n    if(isIndexValid(board,x, y - i) && board[x,y-i] == character){\n      hStart <- (y-i)\n    }\n    else{\n      break\n    }\n  }\n  for(i in 1:K){\n    if(isIndexValid(board,x, y + i) && board[x,y+i] == character){\n      hEnd <- (y+i)\n    }\n    else{\n      break\n    }\n  }\n  if(hEnd - hStart + 1 >= K){\n    cat(\"Horizontal winning line from \")\n    cat(\"[\")\n    cat(x)\n    cat(\", \")\n    cat(hStart)\n    cat(\"] to [\")\n    cat(x)\n    cat(\", \")\n    cat(hEnd)\n    cat(\"]\\n\")\n    return(TRUE)\n  }\n  \n  vStart <- x\n  vEnd <- x\n  #vertical\n  for(i in 1:K){\n    if(isIndexValid(board,x-i, y) && board[x-i,y] == character){\n      vStart <- (x-i)\n    }\n    else{\n      break\n    }\n  }\n  for(i in 1:K){\n    if(isIndexValid(board,x+i, y) && board[x+i,y] == character){\n      vEnd <- (x+i)\n    }\n    else{\n      break\n    }\n  }\n  if(vEnd - vStart + 1 >= K){\n    cat(\"Vertical winning line from \")\n    cat(\"[\")\n    cat(vStart)\n    cat(\", \")\n    cat(y)\n    cat(\"] to [\")\n    cat(vEnd)\n    cat(\", \")\n    cat(y)\n    cat(\"]\\n\")\n    return(TRUE)\n  }\n  \n  dStart <- 0\n  dEnd <- 0\n  #diagonal\n  for(i in 1:K){\n    if(isIndexValid(board,x-i, y-i) && board[x-i,y-i] == character){\n      dStart <- i\n    }\n    else{\n      break\n    }\n  }\n  for(i in 1:K){\n    if(isIndexValid(board,x+i, y+i) && board[x+i,y+i] == character){\n      dEnd <- i\n    }\n    else{\n      break\n    }\n  }\n  if(dEnd + dStart + 1 >= K){\n    cat(\"Diagonal winning line from \")\n    cat(\"[\")\n    cat(x - dStart)\n    cat(\", \")\n    cat(y - dStart)\n    cat(\"] to [\")\n    cat(x + dEnd)\n    cat(\", \")\n    cat(y + dEnd)\n    cat(\"]\\n\")\n    return(TRUE)\n  }\n  \n  adStart <- 0\n  adEnd <- 0\n  #anti-diagonal\n  for(i in 1:K){\n    if(isIndexValid(board,x+i, y-i) && board[x+i,y-i] == character){\n      adStart <- i\n    }\n    else{\n      break\n    }\n  }\n  for(i in 1:K){\n    if(isIndexValid(board,x-i, y+i) && board[x-i,y+i] == character){\n      adEnd <- i\n    }\n    else{\n      break\n    }\n  }\n  if(adEnd + adStart + 1 >= K){\n    cat(\"Anti-diagonal winning line from \")\n    cat(\"[\")\n    cat(x + adStart)\n    cat(\", \")\n    cat(y - adStart)\n    cat(\"] to [\")\n    cat(x - adEnd)\n    cat(\", \")\n    cat(y + adEnd)\n    cat(\"]\\n\")\n    return(TRUE)\n  }\n  \n  return(FALSE)\n}\n\ngetIndecies <- function(fieldId, N){\n  row=0\n  col=0\n  row = fieldId %% N \n  if(row==0){\n    row = N\n    col = fieldId/N\n  }\n  else{\n    col = ceiling(fieldId/N)\n  }\n  return(c(row,col))\n}\n\nstrategy = 0\nplayerSymbol <- 1\ncomputerSymbol <- 2\n\nstartGame <- function(str){\n  strategy <<- str\n  \n  n <<- readline(prompt=\"Enter board size: \")\n  N <<- as.integer(n)\n  if(length(str) != 3^(N*N)){\n    print(\"Error. Given strategy is compatible with this board size\")\n    return(FALSE)\n  }\n  \n  k <<- readline(prompt=\"Enter winning line size: \")\n  K <<- as.integer(k)\n  \n  board <<- matrix(0, N, N)\n  moveCounter <<- N*N\n  \n  whoFirst <- readline(prompt=\"Choose your symbol '1' or '2' (player with '1' always plays first): \")\n  if(whoFirst == '2'){\n    print(\"COMPUTER starts. Your symbol is '2'.\")\n    playerSymbol <<- 2\n    computerSymbol <<- 1\n    randomMove = strategy[boardToId(board)]\n    board[randomMove] <<- computerSymbol\n    print(board)\n  }\n  else{\n    print(\"You start. Your symbol is '1'.\")\n    playerSymbol <<- 1\n    computerSymbol <<- 2\n    print(board)\n  }\n  \n}\n\nmove <- function(x,y){\n  if(board[x,y] != blank){\n    return (FALSE)\n  }\n  \n  board[x,y] <<- playerSymbol\n  moveCounter <<- moveCounter - 1\n  if(checkResult(board,x,y,playerSymbol,K) == TRUE){\n    print(\"You won!\")\n    print(board)\n    return(TRUE)\n  }\n  \n  if(moveCounter <= 0){\n    print(\"REMIS\")\n    return(TRUE)\n  }\n  \n  randomMove = strategy[boardToId(board)]\n  board[randomMove] <<- computerSymbol\n  ind = getIndecies(randomMove,N)\n  \n  if(checkResult(board,ind[1],ind[2], computerSymbol,K) == TRUE){\n    print(\"You lost!\")\n    print(board)\n    return(TRUE)\n  }\n  \n  moveCounter <<- moveCounter -1\n  if(moveCounter <= 0){\n    print(\"Draw!\")\n    print(board)\n    return(TRUE)\n  }\n  print(board)\n}",
    "created" : 1433442020537.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "23|49|157|0|\n",
    "hash" : "2315332929",
    "id" : "3087FF43",
    "lastKnownWriteTime" : 1433602393,
    "path" : "C:/Users/Mateusz/Desktop/repozytoria/Coevolutionary-Tic-Tac-Toe-learning-/src/CoevolutionaryTicTacToe/StrategyGamer.R",
    "project_path" : "StrategyGamer.R",
    "properties" : {
        "tempName" : "Untitled1"
    },
    "source_on_save" : false,
    "type" : "r_source"
}