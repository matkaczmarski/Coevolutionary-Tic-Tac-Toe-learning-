{
    "contents" : "#Battle\n\n\ngetNextMove <- function(board){\n  return(sample(which(board == 0, arr.ind = F),1))\n}\n\ncheckResult <- function(board, x,y,character){\n  hStart <- y\n  hEnd <- y\n  #horizontal\n  for(i in 1:K){\n    if(isIndexValid(x, y - i) && board[x,y-i] == character){\n      hStart <- (y-i)\n    }\n    else{\n      break\n    }\n  }\n  for(i in 1:K){\n    if(isIndexValid(x, y + i) && board[x,y+i] == character){\n      hEnd <- (y+i)\n    }\n    else{\n      break\n    }\n  }\n  if(hEnd - hStart + 1 >= K){\n    cat(\"Horizontal winning line from \")\n    cat(\"[\")\n    cat(x)\n    cat(\", \")\n    cat(hStart)\n    cat(\"] to [\")\n    cat(x)\n    cat(\", \")\n    cat(hEnd)\n    cat(\"]\\n\")\n    return(TRUE)\n  }\n  \n  vStart <- x\n  vEnd <- x\n  #vertical\n  for(i in 1:K){\n    if(isIndexValid(x-i, y) && board[x-i,y] == character){\n      vStart <- (x-i)\n    }\n    else{\n      break\n    }\n  }\n  for(i in 1:K){\n    if(isIndexValid(x+i, y) && board[x+i,y] == character){\n      vEnd <- (x+i)\n    }\n    else{\n      break\n    }\n  }\n  if(vEnd - vStart + 1 >= K){\n    cat(\"Vertical winning line from \")\n    cat(\"[\")\n    cat(vStart)\n    cat(\", \")\n    cat(y)\n    cat(\"] to [\")\n    cat(vEnd)\n    cat(\", \")\n    cat(y)\n    cat(\"]\\n\")\n    return(TRUE)\n  }\n  \n  dStart <- 0\n  dEnd <- 0\n  #diagonal\n  for(i in 1:K){\n    if(isIndexValid(x-i, y-i) && board[x-i,y-i] == character){\n      dStart <- i\n    }\n    else{\n      break\n    }\n  }\n  for(i in 1:K){\n    if(isIndexValid(x+i, y+i) && board[x+i,y+i] == character){\n      dEnd <- i\n    }\n    else{\n      break\n    }\n  }\n  if(dEnd + dStart + 1 >= K){\n    cat(\"Diagonal winning line from \")\n    cat(\"[\")\n    cat(x - dStart)\n    cat(\", \")\n    cat(y - dStart)\n    cat(\"] to [\")\n    cat(x + dEnd)\n    cat(\", \")\n    cat(y + dEnd)\n    cat(\"]\\n\")\n    return(TRUE)\n  }\n  \n  adStart <- 0\n  adEnd <- 0\n  #anti-diagonal\n  for(i in 1:K){\n    if(isIndexValid(x+i, y-i) && board[x+i,y-i] == character){\n      adStart <- i\n    }\n    else{\n      break\n    }\n  }\n  for(i in 1:K){\n    if(isIndexValid(x-i, y+i) && board[x-i,y+i] == character){\n      adEnd <- i\n    }\n    else{\n      break\n    }\n  }\n  if(adEnd + adStart + 1 >= K){\n    cat(\"Anti-diagonal winning line from \")\n    cat(\"[\")\n    cat(x + adStart)\n    cat(\", \")\n    cat(y - adStart)\n    cat(\"] to [\")\n    cat(x - adEnd)\n    cat(\", \")\n    cat(y + adEnd)\n    cat(\"]\\n\")\n    return(TRUE)\n  }\n  \n  return(FALSE)\n}\n\n\nbattle <- function(N,k,battles){\n  p1 = 1\n  p2 = 2\n  scores=c(0,0)\n  \n  for(i in 1:battles){\n    \n    board = matrix(0,N,N)\n    moveCounter = N*N\n    \n    while(moveCounter > 0){\n      \n      #p1:\n      randomMove = getNextMove(board)\n      board[randomMove] = 1\n      r = randomMove%%N\n      c = floor(randomMove/N)\n      if(checkResult(board,r,c, 1) == TRUE){\n        print(\"wygra≈Ç p1\")\n        scores[p1] = scores[p1] + 1\n        scores[p2] = scores[p2] - 2\n        break\n      }\n      \n      #p2:\n      randomMove = getNextMove(board)\n      board[randomMove] = 2\n      r = randomMove%%N\n      c = floor(randomMove/N)\n      \n      if(checkResult(board,r,c,2) == TRUE){\n        print(\"wygral p2\")\n        scores[p1] = scores[p1] - 2\n        scores[p2] = scores[p2] + 1\n        break\n      }    \n      moveCounter = moveCounter -2\n      if(moveCounter == 0){\n        print(\"DRAW\")\n      }\n    }\n  }\n  \n  return(scores)\n}",
    "created" : 1433419025946.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "7|46|141|0|\n",
    "hash" : "2525730153",
    "id" : "951F817B",
    "lastKnownWriteTime" : 1433425202,
    "path" : "C:/Users/Mateusz/Desktop/repozytoria/Coevolutionary-Tic-Tac-Toe-learning-/src/CoevolutionaryTicTacToe/Battle.R",
    "project_path" : "Battle.R",
    "properties" : {
        "tempName" : "Untitled1"
    },
    "source_on_save" : false,
    "type" : "r_source"
}